@page "/students/{StudentID:int}"
@using StudentSearcher.Models
@inject IDbContextFactory<MyContext> DbFactory

<PageTitle>StudentSeacher - @StudentID</PageTitle>
<link href="/css/custom.css" rel="stylesheet" />

<Header></Header>


@if(!IsLoading && IsValidID && IsFound && SingleStudent != null && StudentContacts != null)
{
    <h2>Contacts for @SingleStudent.LastName, @SingleStudent.FirstName</h2>

    @if(StudentContacts.Count == 0)
    {
        <h3 class="none">No contacts</h3>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>Student ID</th>
                    <th>Last Name</th>
                    <th>First Name</th>
                    <th>Relationship</th>
                    <th>Email Address</th>
                    <th>Mobile</th>
                    <th>Address</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Zip Code</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Contact c in StudentContacts)
                {
                    <tr>
                            <td>
                                @* TEMP: Placeholder logic *@
                                @(c.StudentID + 99400000)
                            </td>
                            <td>@c.LastName</td>
                            <td>@c.FirstName</td>
                            <td>@c.Relationship</td>
                            <td>@c.EmailAddress</td>
                            <td>@c.MobileNumber</td>
                            <td>@c.Address</td>
                            <td>@c.City</td>
                            <td>@c.State</td>
                            <td>@c.ZIPCode</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else if (!IsLoading && (!IsValidID || !IsFound))
{
    <h2 class="none">Invalid Student ID</h2>
}
@if(IsLoading)
{
    <h3 class="loading">Loading...</h3>
}


<br>
<h4>
    Back to
    <a href="/students">
        Student Data
    </a>
</h4>


@code 
{
    [Parameter]
    public int StudentID { get; set; }

    private Student? SingleStudent { get; set; }
    private List<Contact>? StudentContacts { get; set; }
    private bool IsLoading { get; set; }
    private bool IsValidID { get; set; }
    private bool IsFound { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await CheckID();
        if(IsValidID)
        {
            await LoadOneStudent();
            if(IsFound)
            {
                await LoadStudentContacts();
            }
        }
        IsLoading = false;
    }

    private Task CheckID()
    {
        IsValidID = 
            (StudentID+99400000 >= 99500000 || StudentID+99400000 <= 99400000)
                ? false
                : true;
        return Task.CompletedTask;
    }

    private Task LoadOneStudent()
    {
        using var context = DbFactory.CreateDbContext();
        Student? retrievedStudent = context.Students
            .FirstOrDefault(s => s.StudentID == StudentID);
        IsFound = (retrievedStudent == null) ? false : true;
        SingleStudent = retrievedStudent;
        return Task.CompletedTask;
    }

    private Task LoadStudentContacts()
    {
        using var context = DbFactory.CreateDbContext();
        StudentContacts = context.Contacts
            .Where(c => c.StudentID == StudentID)
            .ToList();
        return Task.CompletedTask;
    }
}