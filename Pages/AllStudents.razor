@page "/students"
@using StudentSearcher.Models 
@inject IDbContextFactory<MyContext> DbFactory

<PageTitle>StudentSeacher - Student Data</PageTitle>
<link href="/css/custom.css" rel="stylesheet" />

<Header></Header>
<h2>Student Data</h2>


@* Conditional rendering *@
@if(IsLoading)
{
    <h3 class="loading">Loading...</h3>
}
else if (StudentList.Count() == 0)
{
    <h3 class="none">No students in DB</h3>
}
else
{
    <table class="dbDataTable">
        <thead>
            <tr>
                <th>School Code</th>
                <th>Student ID</th>
                <th>Last Name</th>
                <th>First Name</th>
                <th>Address</th>
                <th>City</th>
                <th>State</th>
                <th>Zip Code</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Student s in StudentList)
            {
                <tr>
                    <td>@s.SchoolCode</td>
                    <td>
                        <a href="/students/@s.StudentID">
                            @* TEMP: Placeholder logic *@
                            @(s.StudentID + 99400000)
                        </a>
                    </td>
                    <td>@s.LastName</td>
                    <td>@s.FirstName</td>
                    <td>@s.Address</td>
                    <td>@s.City</td>
                    <td>@s.State</td>
                    <td>@s.ZIPCode</td>
                </tr>
            }
        </tbody>
    </table>
}


@code 
{
    private List<Student> StudentList { get; set; } = new();
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadAllStudents();
        IsLoading = false;
    }

    private Task LoadAllStudents()
    {
        using var context = DbFactory.CreateDbContext();
        if(context.Students != null)
        {
            StudentList = context.Students.ToList();
        }
        return Task.CompletedTask;
    }
}