@page "/contacts"
@using StudentSearcher.Models
@inject IDbContextFactory<MyContext> DbFactory

<PageTitle>StudentSeacher - Student Data</PageTitle>
<link href="/css/custom.css" rel="stylesheet" />

<Header></Header>
<h2>Contact Data</h2>

@* Conditional rendering *@
@if(IsLoading)
{
    <h3 class="loading">Loading...</h3>
}
else if (ContactList.Count() == 0)
{
    <h3 class="none">No contacts in DB</h3>
}
else
{
    <table class="dbDataTable">
        <thead>
            <tr>
                <th>Student ID</th>
                <th>Last Name</th>
                <th>First Name</th>
                <th>Relationship</th>
                <th>Email Address</th>
                <th>Mobile</th>
                <th>Address</th>
                <th>City</th>
                <th>State</th>
                <th>Zip Code</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Contact c in ContactList)
            {
                <tr>
                    <td>
                        <a href="/students/@c.StudentID">
                            @c.StudentID
                        </a>
                    </td>
                    <td>@c.LastName</td>
                    <td>@c.FirstName</td>
                    <td>@c.Relationship</td>
                    <td>@c.EmailAddress</td>
                    <td>@c.MobileNumber</td>
                    <td>@c.Address</td>
                    <td>@c.City</td>
                    <td>@c.State</td>
                    <td>@c.ZIPCode</td>
                </tr>
            }
        </tbody>
    </table>
}

@code 
{
    private List<Contact> ContactList { get; set; } = new();
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadAllContacts();
        IsLoading = false;
    }

    private Task LoadAllContacts()
    {
        using var context = DbFactory.CreateDbContext();
        if(context.Contacts != null)
        {
            ContactList = context.Contacts.ToList();
        }
        return Task.CompletedTask;
    }
}